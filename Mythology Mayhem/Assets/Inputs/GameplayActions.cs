//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/GameplayActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3d63082e-2b67-45df-a192-5a170ca53bb9"",
            ""actions"": [
                {
                    ""name"": ""DismissCompanion"",
                    ""type"": ""Button"",
                    ""id"": ""e8f9334f-d2cd-4dde-ae1f-e454b1b80f56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CallCompanion"",
                    ""type"": ""Button"",
                    ""id"": ""32c280f7-64b7-4f45-a4d6-a4f584930056"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitGame"",
                    ""type"": ""Button"",
                    ""id"": ""f49126e5-8436-4fd6-9c47-5caa37ae1fcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LSC"",
                    ""id"": ""8d3c49b4-921c-4a43-94f7-4361768be322"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DismissCompanion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""b516c5d8-547f-4844-bb9c-ef878e5f2fe8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DismissCompanion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""1f0253be-5d81-48bd-bf0b-8eec8f532f10"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DismissCompanion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fec45cb6-f12a-4ae0-b14f-4840abfdb566"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CallCompanion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ShiftEsc"",
                    ""id"": ""a8e040fe-b727-4ff7-83db-02f2ddaec818"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""e7e668ef-a2db-4d58-87ca-8e3e62e67596"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""fee55a5d-878f-408d-a908-583acb4f85bd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_DismissCompanion = m_Player.FindAction("DismissCompanion", throwIfNotFound: true);
        m_Player_CallCompanion = m_Player.FindAction("CallCompanion", throwIfNotFound: true);
        m_Player_ExitGame = m_Player.FindAction("ExitGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_DismissCompanion;
    private readonly InputAction m_Player_CallCompanion;
    private readonly InputAction m_Player_ExitGame;
    public struct PlayerActions
    {
        private @GameplayActions m_Wrapper;
        public PlayerActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DismissCompanion => m_Wrapper.m_Player_DismissCompanion;
        public InputAction @CallCompanion => m_Wrapper.m_Player_CallCompanion;
        public InputAction @ExitGame => m_Wrapper.m_Player_ExitGame;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @DismissCompanion.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismissCompanion;
                @DismissCompanion.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismissCompanion;
                @DismissCompanion.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismissCompanion;
                @CallCompanion.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCallCompanion;
                @CallCompanion.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCallCompanion;
                @CallCompanion.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCallCompanion;
                @ExitGame.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitGame;
                @ExitGame.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitGame;
                @ExitGame.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitGame;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DismissCompanion.started += instance.OnDismissCompanion;
                @DismissCompanion.performed += instance.OnDismissCompanion;
                @DismissCompanion.canceled += instance.OnDismissCompanion;
                @CallCompanion.started += instance.OnCallCompanion;
                @CallCompanion.performed += instance.OnCallCompanion;
                @CallCompanion.canceled += instance.OnCallCompanion;
                @ExitGame.started += instance.OnExitGame;
                @ExitGame.performed += instance.OnExitGame;
                @ExitGame.canceled += instance.OnExitGame;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDismissCompanion(InputAction.CallbackContext context);
        void OnCallCompanion(InputAction.CallbackContext context);
        void OnExitGame(InputAction.CallbackContext context);
    }
}
